@model Aleris.Models.Company

@{
    ViewData["Title"] = "Продажби - " + Model.Name;
    var currentUserId = Context.Session.GetInt32("UserId");
    var isAdmin = Model.TeamMembers.Any(m => m.UserId == currentUserId && m.Role == Aleris.Models.UserRole.Admin);
    var isEditor = Model.TeamMembers.Any(m => m.UserId == currentUserId && m.Role == Aleris.Models.UserRole.Editor);
    var sortColumn = Context.Request.Query["sortColumn"];
    var sortOrder = Context.Request.Query["sortOrder"];
}

<div class="content">
    <h1>Продажби за @Model.Name:</h1>

    <div class="purchase-header">
        <div class="search-container">
            <button class="filter-button" id="filter-btn">Търсене</button>
        </div>

        @if (isAdmin || isEditor)
        {
            <a href="@Url.Action("AddSale", "Sales", new { companyId = Model.Id })" class="btn btn-success">
                + Добавяне на продажба
            </a>
        }
    </div>

    <!-- Filter Form (Hidden Initially) -->
    <div id="filter-form" class="filter-form hidden">
        <label for="filter-type">Потърси по:</label>
        <select id="filter-type" class="search-bar">
            <option value="name" selected>Име на продукт</option>
            <option value="date">Дата</option>
        </select>

        <div id="product-name-filter">
            <label for="product-name">Име на продукт:</label>
            <input type="text" id="product-name" class="search-bar">
        </div>

        <div id="date-filter" class="hidden">
            <label for="start-date">From:</label>
            <input type="date" id="start-date" class="search-bar">

            <label for="end-date">To:</label>
            <input type="date" id="end-date" class="search-bar">
        </div>

        <button id="apply-filter" class="filter-button">Приложи</button>
    </div>

    <table class="purchase-table">
        <thead>
            <tr>
                @foreach (var column in new[] { "Дата", "Име на продукт", "Количество", "Тип на количество", "Цена на продукт", "Обща сума" })
                {
                    string nextSortOrder = sortColumn == column && sortOrder == "asc" 
                        ? "desc" 
                        : sortColumn == column && sortOrder == "desc"
                            ? null // Reset sorting
                            : "asc";

                    string icon = sortColumn == column 
                        ? (sortOrder == "asc" ? "bi-arrow-up" : "bi-arrow-down") 
                        : "bi-arrow-down-up";
                    
                    <th class="table-header">
                        <a href="@(nextSortOrder != null ? $"?sortColumn={column}&sortOrder={nextSortOrder}" : "?")" class="sort-link">
                            @column <i class="bi @icon"></i>
                        </a>
                    </th>
                }
            </tr>
        </thead>
        <tbody id="purchase-table-body">
            @foreach (var sale in Model.Sales)
            {
                <tr>
                    <td>@sale.Date.ToString("M/d/yyyy HH:mm:ss")</td>
                    <td>@sale.Name</td>
                    <td>@sale.Quantity</td>
                    <td>@sale.UnitType</td>
                    <td>@sale.ProductPrice.ToString("C", new System.Globalization.CultureInfo("bg-BG"))</td>
                    <td>@sale.TotalPrice.ToString("C", new System.Globalization.CultureInfo("bg-BG"))</td>
                    <td class="action-icons">
                        @if (isAdmin || isEditor)
                        {
                            <a href="@Url.Action("EditSale", "Sales", new { id = sale.Id })" class="btn btn-sm btn-outline-primary me-1" title="Редактирай">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <form asp-action="DeleteSale" asp-controller="Sales" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@sale.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Изтрий"
                                        onclick="return confirm('Сигурни ли сте, че искате да изтриете тази продажба?');">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </form>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- script for filtering form -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const filterBtn = document.getElementById("filter-btn");
        const filterForm = document.getElementById("filter-form");
        const filterType = document.getElementById("filter-type");
        const productNameFilter = document.getElementById("product-name-filter");
        const dateFilter = document.getElementById("date-filter");
        const applyFilterBtn = document.getElementById("apply-filter");

        // Show/hide filter form
        filterBtn.addEventListener("click", function () {
            filterForm.classList.toggle("hidden");
        });

        // Change search bar text and toggle filter inputs
        filterType.addEventListener("change", function () {
            if (filterType.value === "name") {
                productNameFilter.classList.remove("hidden");
                dateFilter.classList.add("hidden");
            } else {
                productNameFilter.classList.add("hidden");
                dateFilter.classList.remove("hidden");
            }
        });

        // Apply filter logic
        applyFilterBtn.addEventListener("click", function () {
            const filterTypeValue = filterType.value;
            const rows = document.querySelectorAll("#purchase-table-body tr");

            let searchQuery = "";
            let startDate = "";
            let endDate = "";

            // Get filter values based on filter type
            if (filterTypeValue === "name") {
                searchQuery = document.getElementById("product-name").value.toLowerCase(); // For product name search
            } else {
                startDate = document.getElementById("start-date").value;
                endDate = document.getElementById("end-date").value;
            }

            rows.forEach(row => {
                const productName = row.cells[1].innerText.toLowerCase();
                const purchaseDate = row.cells[0].innerText.split(' ')[0]; // Example: "2/23/2025 5:31:09 PM"

                let matches = false;

                if (filterTypeValue === "name") {
                    matches = productName.includes(searchQuery); // Product name filter
                } else if (filterTypeValue === "date") {
                    if (startDate && endDate) {
                        // Convert start and end dates to Date objects, but only compare the date part
                        let start = new Date(startDate);
                        let formattedStart = (start.getMonth() + 1) + '/' + start.getDate() + '/' + start.getFullYear();
                        let end = new Date(endDate);
                        let formattedEnd = (end.getMonth() + 1) + '/' + end.getDate() + '/' + end.getFullYear();

                        // Compare if the purchase date is within the range
                        matches = purchaseDate >= formattedStart && purchaseDate <= formattedEnd;
                    }
                }

                // Show or hide the row based on filter match
                row.style.display = matches ? "" : "none";
            });
        });
    });
</script>

<!-- JavaScript for sorting the table according to the table headers -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const headers = document.querySelectorAll(".sortable");
        let sortState = {}; // Track sorting state per column

        headers.forEach(header => {
            header.addEventListener("click", function () {
                const column = this.getAttribute("data-column");
                const tableBody = document.getElementById("purchase-table-body");
                const rows = Array.from(tableBody.getElementsByTagName("tr"));

                // Determine the new sorting state
                if (!sortState[column]) {
                    sortState[column] = "asc";  // First click: Ascending
                } else if (sortState[column] === "asc") {
                    sortState[column] = "desc"; // Second click: Descending
                } else {
                    sortState[column] = null;   // Third click: Reset
                }

                // Reset icons for all headers
                headers.forEach(h => h.innerHTML = h.innerText);

                if (sortState[column]) {
                    // Sort the rows based on the column
                    rows.sort((a, b) => {
                        let aValue = a.cells[header.cellIndex].innerText.trim();
                        let bValue = b.cells[header.cellIndex].innerText.trim();

                        // Convert to numbers if possible
                        if (!isNaN(aValue) && !isNaN(bValue)) {
                            aValue = parseFloat(aValue);
                            bValue = parseFloat(bValue);
                        }

                        return sortState[column] === "asc" ? aValue > bValue ? 1 : -1 : aValue < bValue ? 1 : -1;
                    });

                    // Add sorting icon
                    this.innerHTML = this.innerText + (sortState[column] === "asc" ? " ▲" : " ▼");
                }

                // Reattach sorted rows or reset order
                tableBody.innerHTML = "";
                if (sortState[column]) {
                    rows.forEach(row => tableBody.appendChild(row));
                } else {
                    window.location.reload(); // Reset sorting to default
                }
            });
        });
    });
</script>